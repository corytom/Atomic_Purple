#!/usr/bin/python
import re
import socket

atomic_purple_attacks = {
    "Boot or Logon Autostart Execution": "ID:T1547",
    "Brute Force": "ID:1110",
    "Phishing": "ID:T1660",
    "Impair Defenses": "ID:1562",
}

atomic_purple_defense = {
    "M1047 Audit: Routinely check account role permissions to ensure only expected users and roles have permission to modify defensive tools and settings.",
    "M1038 Execution Prevention: Use application control where appropriate, especially regarding the execution of tools outside of the organization's security policies (such as rootkit removal tools) that have been abused to impair system defenses. Ensure that only approved security applications are used and running on enterprise systems.",
    "M1022 Restrict File and Directory Permissions: Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security/logging services.",
    "M1024 Restrict Registry Permissions: Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security/logging services.",
    "M1054 Software Configuration: Consider implementing policies on internal web servers, such HTTP Strict Transport Security, that enforce the use of HTTPS/network traffic encryption to prevent insecure connections.",
    "M1018 User Account Management: Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services.",
}

log_file = "/var/log/auth.log"

def get_ip_address():
    try:
        # Get the hostname of the system
        hostname = socket.gethostname()
        # Get the IP address associated with the hostname
        ip_address = socket.gethostbyname(hostname)
        return ip_address
    except Exception as e:
        print("Error:", e)
        return None

if __name__ == "__main__":
    ip_address = get_ip_address()
    if ip_address:
        print("IP Address:", ip_address)
    else:
        print("Failed to retrieve IP address.")

def failed_login(log_file):
    with open(log_file, "r") as file:
        pattern = r"authentication failure"
        regex = re.compile(pattern)
        
        failed_attempts = 0
        for line in file:
            if regex.search(line):
                failed_attempts += 1
                    
        print(f"Number of failed login attempts: {failed_attempts}")

def atomic_purple():
    while True:
        userinput = input("Enter the attack or defense (or type 'exit' to quit): ")
        if userinput == 'exit':
            print("Exiting the program!!")
            break
        elif userinput.lower() == "brute force":
            answer = input("Would you like to check for failed logins:")
            if answer.lower() == "yes":
                failed_login(log_file)
            else: 
                print("no function called")
        elif userinput in atomic_purple_attacks:
            print("Defense for", userinput, "is", atomic_purple_attacks[userinput])
        elif userinput in atomic_purple_defense:
            print("Attack for", userinput, "is", atomic_purple_defense[userinput])
        else:
            print("Attack not found, enter valid attack")

# Test the function
atomic_purple()


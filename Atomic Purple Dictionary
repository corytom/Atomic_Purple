atomic_purple_attacks = {
"Boot or Logon Autostart Execution": "ID:T1547" "Defense: This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features.
"Phishing": "ID:T1660" "Defense: M1058	Antivirus/Antimalware	
Some mobile security products offer a loopback VPN used for inspecting traffic. This could proactively block traffic to websites that are known for phishing or appear to be conducting a phishing attack. M1011 User Guidance	
Users can be trained to identify social engineering techniques and phishing emails."


atomic_purple_defense = {
"Impair Defenses": "ID:1562" "Defense": 

"M1047 Audit: Routinely check account role permissions to ensure only expected users and roles have permission to modify defensive tools and settings." 

"M1038 Execution Prevention: Use application control where appropriate, especially regarding the execution of tools outside of the organization's security policies (such as rootkit removal tools) that have been abused to impair system defenses. Ensure that only approved security applications are used and running on enterprise systems." 

"M1022 Restrict File and Directory Permissions: Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security/logging services." 

"M1024 Restrict Registry Permissions: Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security/logging services."

"M1054 Software Configuration: Consider implementing policies on internal web servers, such HTTP Strict Transport Security, that enforce the use of HTTPS/network traffic encryption to prevent insecure connections."















def atomic_purple():

while True:
  userinput = input("Enter the attack or defense (or type 'exit' to quit): ").lower()
if userinput == 'exit':  
 print("Exiting the progam!!")
  break
if userinput in atomic_purple_attacks:
  print("Defense for", userinput, "is", atomic_purple_attacks[userinput])
elif userinput in atomic_purple_defense:
  print("Attack for", userinput, "is", atomic_purple_defense[userinput])
{atomic_purple_attacks[userinput]}
  else:
      print("Attack not found, enter valid attack")

#test the function
atomic_purple()
